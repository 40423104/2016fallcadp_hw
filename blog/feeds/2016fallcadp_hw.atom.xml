<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2016Fall 課程網誌 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/2016fallcadp_hw.atom.xml" rel="self"></link><id>./</id><updated>2016-11-03T13:13:00+08:00</updated><entry><title>2016Fall 11/03 四連桿機構(一)</title><link href="./2016fall-1103-si-lian-gan-ji-gou-yi.html" rel="alternate"></link><published>2016-11-03T13:13:00+08:00</published><updated>2016-11-03T13:13:00+08:00</updated><author><name>40423104 syuan</name></author><id>tag:,2016-11-03:./2016fall-1103-si-lian-gan-ji-gou-yi.html</id><summary type="html">&lt;h3&gt;四連桿機構模擬&lt;/h3&gt;
&lt;p&gt;&lt;hr/&gt;

&lt;iframe src="https://player.vimeo.com/video/189118736" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/189118736"&gt;2016-10-27_16-22-06&lt;/a&gt; from &lt;a href="https://vimeo.com/user44900188"&gt;Yan syuan&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;繪製&lt;/h3&gt;
&lt;hr/&gt;

&lt;p&gt;1.可參考https://mdecourse.github.io/2016fallcadpa/blog/2016fall-w7-si-lian-gan-ji-gou-mo-ni.html 繪製&lt;/p&gt;

&lt;p&gt;2.http://solvespace.com/linkage.pl &lt;/p&gt;

&lt;p&gt;3.使用solvespace畫四連桿機構&lt;/p&gt;

&lt;p&gt;4.路徑操作請參考以上影片做操作&lt;/p&gt;</summary><category term="2016Fall w7 四連桿機構模擬"></category></entry><entry><title>2016Fall 11/17 Solvespace 平面四連桿機構模擬</title><link href="./2016fall-1117-solvespace-ping-mian-si-lian-gan-ji-gou-mo-ni.html" rel="alternate"></link><published>2016-11-03T13:13:00+08:00</published><updated>2016-11-03T13:13:00+08:00</updated><author><name>40423104 syuan</name></author><id>tag:,2016-11-03:./2016fall-1117-solvespace-ping-mian-si-lian-gan-ji-gou-mo-ni.html</id><summary type="html">&lt;h3&gt;有關 Solvespace 機構模擬功能介紹, 與 Python3 及 Brython 程式驗證&lt;/h3&gt;
&lt;p&gt;&lt;hr/&gt;

&lt;p&gt;直接利用 Solvespace Analyze-Trace Point-Stop Trace 得到下列繞行路徑:&lt;/p&gt;
&lt;a href="http://imgur.com/mIJl2qt"&gt;&lt;img src="http://i.imgur.com/mIJl2qt.png" title="source: imgur.com" /&gt;&lt;/a&gt;
&lt;p&gt;將所得到的點座標 .csv 以 Excel 畫圖, 得到:&lt;/p&gt;
&lt;a href="http://imgur.com/IGFo32x"&gt;&lt;img src="http://i.imgur.com/IGFo32x.jpg" title="source: imgur.com" /&gt;&lt;/a&gt;
&lt;p&gt;Python3 平面四連桿機構模擬:&lt;/p&gt;
&lt;p&gt;接下來利用三角函數推導四連桿機構的運動模擬, 即已知長度 18 公分的連桿以逆時針方向旋轉, 希望求三角形頂點的運動座標.&lt;/p&gt;
&lt;p&gt;首先利用 Brython, 讀取 data 目錄中的 cadpa_w10_4bar.csv 座標檔案, 然後以 splitlines() 及 split() 取出各點的 x 座標與 y 座標後, 將點連成路徑曲線如下:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;&lt;/p&gt;
&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫兩條直線 --&gt;

&lt;canvas id="fourbar" width="600" height="600"&gt;&lt;/canvas&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
# 準備繪圖畫布
canvas = doc["fourbar"]
container1 = doc['container1']
ctx = canvas.getContext("2d")

fourbar_data = open("./../w7/11117.csv").read()
fourbar_list = fourbar_data.splitlines()
#container1 &lt;= fourbar_list[0]
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 配合圖形位置進行座標轉換
ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100)
# 畫出 x 與 y 座標線
# 各座標值放大 8 倍
ratio = 8
'''
ctx.moveTo(0, 0)
ctx.lineTo(0, 100)
ctx.moveTo(0, 0)
ctx.lineTo(100, 0)
'''
ctx.moveTo(0, 0)
ctx.lineTo(-30*ratio, 0)
start_point = fourbar_list[0].split(",")
ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio)
count = 0
for data in fourbar_list[1:]:
    point = data.split(",")
    #count = count + 1
    #container1 &lt;= str(count) + ":" + point[0] + "," + point[1]
    #container1 &lt;= html.BR()
    ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;</summary><category term="2016Fall w9 Solvespace 平面四連桿機構模擬"></category></entry><entry><title>2016Fall 10/27 solvespace</title><link href="./2016fall-1027-solvespace.html" rel="alternate"></link><published>2016-10-27T14:54:00+08:00</published><updated>2016-10-27T14:54:00+08:00</updated><author><name>40423104 syuan</name></author><id>tag:,2016-10-27:./2016fall-1027-solvespace.html</id><summary type="html">&lt;h3&gt;零件繪製&lt;/h3&gt;
&lt;p&gt;&lt;hr/&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/186445993" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
&lt;a href="https://vimeo.com/186445993"&gt;solvespace&lt;/a&gt; from &lt;a href="https://vimeo.com/user44900188"&gt;Yan syuan&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;心得:&lt;/h3&gt;
&lt;p&gt;&lt;hr/&gt;
&lt;p&gt;1.從原先學習到的複雜介面繪圖，使用完solvespace的介面繪圖，發現對於初學著能很快的學習繪圖。&lt;/p&gt;
&lt;p&gt;2.繪圖方式也不再侷限於必須完全限制才能繪圖。&lt;/p&gt;
&lt;p&gt;3.能做連桿組立與模擬，能在模擬中將自己繪製的連桿機構所行走的路徑。&lt;/p&gt;&lt;/p&gt;</summary><category term="solvespace影片"></category></entry></feed>